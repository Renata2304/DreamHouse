/* tslint:disable */
/* eslint-disable */
/**
 * Authorization server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Listing,
  ListingDto,
} from '../models/index';
import {
    ListingFromJSON,
    ListingToJSON,
    ListingDtoFromJSON,
    ListingDtoToJSON,
} from '../models/index';

export interface AddListingRequest {
    listingDto: ListingDto;
}

export interface DeleteListingRequest {
    id: string;
}

export interface GetListingsByLocationRequest {
    location: string;
}

/**
 * 
 */
export class ListingControllerApi extends runtime.BaseAPI {

    /**
     */
    async addListingRaw(requestParameters: AddListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Listing>> {
        if (requestParameters['listingDto'] == null) {
            throw new runtime.RequiredError(
                'listingDto',
                'Required parameter "listingDto" was null or undefined when calling addListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listing/addListing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListingDtoToJSON(requestParameters['listingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingFromJSON(jsonValue));
    }

    /**
     */
    async addListing(requestParameters: AddListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Listing> {
        const response = await this.addListingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteListingRaw(requestParameters: DeleteListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listing/deleteListing/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteListing(requestParameters: DeleteListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteListingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getListingsByLocationRaw(requestParameters: GetListingsByLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListingDto>>> {
        if (requestParameters['location'] == null) {
            throw new runtime.RequiredError(
                'location',
                'Required parameter "location" was null or undefined when calling getListingsByLocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listing/getByLocation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListingDtoFromJSON));
    }

    /**
     */
    async getListingsByLocation(requestParameters: GetListingsByLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListingDto>> {
        const response = await this.getListingsByLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
