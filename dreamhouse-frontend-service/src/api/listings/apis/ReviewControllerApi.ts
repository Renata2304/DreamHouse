/* tslint:disable */
/* eslint-disable */
/**
 * Authorization server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Review,
  ReviewDto,
} from '../models/index';
import {
    ReviewFromJSON,
    ReviewToJSON,
    ReviewDtoFromJSON,
    ReviewDtoToJSON,
} from '../models/index';

export interface AddReviewRequest {
    reviewDto: ReviewDto;
}

export interface GetReviewsByListingRequest {
    listingId: string;
}

export interface GetReviewsByUserRequest {
    userId: string;
}

/**
 * 
 */
export class ReviewControllerApi extends runtime.BaseAPI {

    /**
     */
    async addReviewRaw(requestParameters: AddReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters['reviewDto'] == null) {
            throw new runtime.RequiredError(
                'reviewDto',
                'Required parameter "reviewDto" was null or undefined when calling addReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewDtoToJSON(requestParameters['reviewDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     */
    async addReview(requestParameters: AddReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.addReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReviewsByListingRaw(requestParameters: GetReviewsByListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Review>>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling getReviewsByListing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/byListing/{listingId}`.replace(`{${"listingId"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewFromJSON));
    }

    /**
     */
    async getReviewsByListing(requestParameters: GetReviewsByListingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Review>> {
        const response = await this.getReviewsByListingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReviewsByUserRaw(requestParameters: GetReviewsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Review>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getReviewsByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reviews/byUser/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewFromJSON));
    }

    /**
     */
    async getReviewsByUser(requestParameters: GetReviewsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Review>> {
        const response = await this.getReviewsByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
